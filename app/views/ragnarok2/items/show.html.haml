.model_details.item
  .header
    .model_icon= ragnarok2_icon_image_tag(@item.icon, :alt=>@item.name)
    %h2= @item
    .categoryies
      =raw @item.categories.collect{|c| link_to c, c}.join(" &#187; ")

    - if @item.description
      .description= ragnarok2_human_description @item.description

  .twin_boxes
    .box_left
      .box
        - unless (@item.main_sets+@item.alternative_sets).empty?
          .title Part of
          - (@item.main_sets+@item.alternative_sets).each do |set|
            .item_set
              = link_to set, set
          %br

        .title Requirements
        .requirements
          - unless @item.require_level.zero?
            .requirement Level: #{@item.require_level}
          - unless @item.require_sex.zero?
            .requirement Gender: #{human_gender(@item.require_sex)}
          - unless @item.jobs.empty?
            .requirement Job: #{@item.jobs.join(", ")}
          - if @item.require_level.zero? && @item.require_sex.zero? && @item.jobs.empty?
            .requirement None
      .box
        .title Properties
        .twin_boxes
          .box_left
            - unless @item.price_buy.zero?
              .attribute Price #{@item.price_buy} (buy), #{(@item.price_buy/10.0).ceil} (sell)
            - unless @item.sockets.empty?
              .property= pluralize(@item.sockets.count, "Socket")
            .attribute #{pluralize @item.stack_max, "piece"} stackable
            .attribute Durability #{human_item_durability(@item.durability)}
            .attribute= booleanize_string("Droppable", @item.is_drop)
            .attribute= booleanize_string("Depositable", @item.is_deposit)
            .attribute= booleanize_string("Destructable", @item.is_destruct)
            .attribute= booleanize_string("Sellable", @item.is_sell)
            .attribute= booleanize_string("Tradable", @item.is_trade)
            .attribute= booleanize_string("Composable", @item.is_compose)

          .box_right
            - if @item.cash_shop_info
              .property
                %span.cashshop CashShop-Item
                = surround '(', ')' do
                  = human_cash_shop_duration(@item.cash_shop_info)
                
            - unless @item.traits.empty?
              - @item.traits.each do |trait|
                .property= render trait

        
      - if @item.skill
        = render @item.skill

      - unless @item.upgrade_infos.empty?
        .box
          .title Refining
          - @item.upgrade_infos.each do |upgrade|
            .upgrade_info              
              Level #{upgrade.upgrade_level+1}:
              +#{upgrade.normalabilityuppercent.to_f/100}% Atk/Def
              
              =# upgrade.need_special_material_amount
              =# link_to upgrade.special_material.to_s.pluralize(upgrade.need_special_material_amount), upgrade.special_material
              = surround "(", ")" do
                = upgrade.need_normal_material_amount
                = succeed "," do
                  = link_to upgrade.normal_material.to_s.pluralize(upgrade.need_normal_material_amount), upgrade.normal_material
                = succeed "," do
                  = pluralize upgrade.need_zenny, "Rupee"
                #{upgrade.normalenforcerate.to_f/100}% success

      - @item.craft_infos.each do |craft_info|
        .box
          .title Can be crafted by
          .craft_infos=render craft_info

      - unless @item.craft_ingredients.empty?
        .box
          .title Material for
          - @item.craft_ingredients.each do |i|
            .craft_ingredients
              = link_to i.craft_info.item, i.craft_info.item
              = surround "(", ")" do
                = pluralize i.amount, "piece"

      - unless @item.craft_info_scrolls.empty?
        .box
          .title Used for crafting
          - @item.craft_info_scrolls.each do |craft_info|
            = render craft_info


    .box_right
      - unless @item.quest_item_rewards.empty?
        .box
          .title Given as quest reward
          - @item.quest_item_rewards.each do |reward|
            .questreward
              = link_to(reward.quest, reward.quest)
              (#{pluralize(reward.amount, "piece")})

      - unless @item.sellcitizens.empty?
        .box
          .title Buyable at
          .merchant_list.twin_boxes
            - @item.sellcitizens.default_order.each do |citizen|
              .merchant{:class=>cycle("box_left", "box_right", :name => "merchant_list_boxes")}
                .name= link_to citizen, citizen


      - unless @item.random_sets.empty?
        .box
          .title Includes
          .twin_boxes
            - @item.random_sets.each do |item|
              %div{:class=>cycle("box_left", "box_right", :name => "random_sets_boxes_includes")}
                = render item

      - boxes = @item.found_in_boxes.select {|box| !box.boxes.empty? }
      - unless boxes.empty?
        .box
          .title Included in
          .twin_boxes
            - boxes.each do |box|
              - box.boxes.each do |b|
                .ragnarok2_random_set{:class=>cycle("box_left", "box_right", :name => "random_sets_boxes_included")}
                  .random_set_icon= ragnarok2_icon_image_tag(b.icon, :alt=>"")
                  .name
                    = link_to b, b
                    - if box.setbox_type.zero?
                      = surround "(", ")" do
                        random
                  .description
                    = pluralize box.package, "piece"
                    - if box.setbox_type.zero?
                      = surround "(", ")" do
                        #{box.ratio.to_f/1000}%

      .box
        .tools
          = link_to "Â» Add monsters", new_drop_path(:item_id=>@item.id) 
        .title Drops from / Gathered from
        - if @item.drops.empty?
          .drop Nothing
        - else 
          .twin_boxes
            - @item.drops.default_order.each do |drop|
              .drop{:class=>cycle("box_left", "box_right", :name => "random_sets_boxes_includes")}
                = render drop

  - unless @item.item_break_results.empty?
    .box
      .title Breaks into
      .break_results
        - @item.item_break_results.each do |break_result|
          = render break_result

= render "/share/development_box", :model => @item